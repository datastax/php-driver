---
Cassandra:
  comment: |
    The main entry point to the PHP Driver for Apache Cassandra.

    Use Cassandra::cluster() to build a cluster instance.
    Use Cassandra::ssl() to build SSL options instance.
  methods:
    cluster:
      comment: |
        Creates a new cluster builder for constructing a Cluster object.
      return:
        comment: A cluster builder object with default settings
        type: \Cassandra\Cluster\Builder
    ssl:
      comment: |
        Creates a new ssl builder for constructing a SSLOptions object.
      return:
        comment: A SSL options builder with default settings
        type: \Cassandra\SSLOptions\Builder
  constants:
    CONSISTENCY_ANY:
      comment: |-
        Consistency level ANY means the request is fulfilled as soon as the data
        has been written on the Coordinator. Requests with this consistency level
        are not guranteed to make it to Replica nodes.

        @see Session::execute()
    CONSISTENCY_ONE:
      comment: |-
        Consistency level ONE guarantees that data has been written to at least
        one Replica node.

        @see Session::execute()
    CONSISTENCY_LOCAL_ONE:
      comment: |-
        Same as `CONSISTENCY_ONE`, but confined to the local data center. This
        consistency level works only with `NetworkTopologyStrategy` replication.

        @see Session::execute()
    CONSISTENCY_TWO:
      comment: |-
        Consistency level TWO guarantees that data has been written to at least
        two Replica nodes.

        @see Session::execute()
    CONSISTENCY_THREE:
      comment: |-
        Consistency level THREE guarantees that data has been written to at least
        three Replica nodes.

        @see Session::execute()
    CONSISTENCY_QUORUM:
      comment: |-
        Consistency level QUORUM guarantees that data has been written to at least
        the majority of Replica nodes. How many nodes exactly are a majority
        depends on the replication factor of a given keyspace and is calculated
        using the formula `ceil(RF / 2 + 1)`, where `ceil` is a mathematical
        ceiling function and `RF` is the replication factor used. For example,
        for a replication factor of `5`, the majority is `ceil(5 / 2 + 1) = 3`.

        @see Session::execute()
    CONSISTENCY_LOCAL_QUORUM:
      comment: |-
        Same as `CONSISTENCY_QUORUM`, but confined to the local data center. This
        consistency level works only with `NetworkTopologyStrategy` replication.

        @see Session::execute()
    CONSISTENCY_EACH_QUORUM:
      comment: |-
        Consistency level EACH_QUORUM guarantees that data has been written to at
        least a majority Replica nodes in all datacenters. This consistency level
        works only with `NetworkTopologyStrategy` replication.

        @see Session::execute()
    CONSISTENCY_ALL:
      comment: |-
        Consistency level ALL guarantees that data has been written to all
        Replica nodes.

        @see Session::execute()
    CONSISTENCY_SERIAL:
      comment: |-
        This is a serial consistency level, it is used in conditional updates,
        e.g. (`CREATE|INSERT ... IF NOT EXISTS`), and should be specified as the
        `serial_consistency` execution option when invoking `session.execute`
        or `session.execute_async`.

        Consistency level SERIAL, when set, ensures that a Paxos commit fails if
        any of the replicas is down.

        @see Session::execute()
    CONSISTENCY_LOCAL_SERIAL:
      comment: |-
        Same as `CONSISTENCY_SERIAL`, but confined to the local data center. This
        consistency level works only with `NetworkTopologyStrategy` replication.

        @see Session::execute()
    VERIFY_NONE:
      comment: |-
        Perform no verification of nodes when using SSL encryption.

        @see SSLOptions\Builder::withVerifyFlags()
    VERIFY_PEER_CERT:
      comment: |-
        Verify presence and validity of SSL certificates.

        @see SSLOptions\Builder::withVerifyFlags()
    VERIFY_PEER_IDENTITY:
      comment: "Verify that the IP address matches the SSL certificate\u2019s common
        name or\none of its subject alternative names. This implies the certificate
        is\nalso present.\n\n@see SSLOptions\\Builder::withVerifyFlags()"
    BATCH_LOGGED:
      comment: '@see BatchStatement::__construct()'
    BATCH_UNLOGGED:
      comment: '@see BatchStatement::__construct()'
    BATCH_COUNTER:
      comment: '@see BatchStatement::__construct()'
    TYPE_TEXT:
      comment: |-
        When using a map, collection or set of type text, all of its elements
        must be strings.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_ASCII:
      comment: |-
        When using a map, collection or set of type ascii, all of its elements
        must be strings.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_VARCHAR:
      comment: |-
        When using a map, collection or set of type varchar, all of its elements
        must be strings.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_BIGINT:
      comment: |-
        When using a map, collection or set of type bigint, all of its elements
        must be instances of Bigint.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_BLOB:
      comment: |-
        When using a map, collection or set of type blob, all of its elements
        must be instances of Blob.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_BOOLEAN:
      comment: |-
        When using a map, collection or set of type bool, all of its elements
        must be boolean.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_COUNTER:
      comment: |-
        When using a map, collection or set of type counter, all of its elements
        must be instances of Bigint.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_DECIMAL:
      comment: |-
        When using a map, collection or set of type decimal, all of its elements
        must be instances of Decimal.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_DOUBLE:
      comment: |-
        When using a map, collection or set of type double, all of its elements
        must be doubles.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_FLOAT:
      comment: |-
        When using a map, collection or set of type float, all of its elements
        must be instances of Float.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_INT:
      comment: |-
        When using a map, collection or set of type int, all of its elements
        must be ints.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_TIMESTAMP:
      comment: |-
        When using a map, collection or set of type timestamp, all of its elements
        must be instances of Timestamp.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_UUID:
      comment: |-
        When using a map, collection or set of type uuid, all of its elements
        must be instances of Uuid.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_VARINT:
      comment: |-
        When using a map, collection or set of type varint, all of its elements
        must be instances of Varint.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_TIMEUUID:
      comment: |-
        When using a map, collection or set of type timeuuid, all of its elements
        must be instances of Timeuuid.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_INET:
      comment: |-
        When using a map, collection or set of type inet, all of its elements
        must be instances of Inet.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_SMALLINT:
      comment: |-
        When using a map, collection or set of type smallint, all of its elements
        must be instances of Inet.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    TYPE_TINYINT:
      comment: |-
        When using a map, collection or set of type tinyint, all of its elements
        must be instances of Inet.

        @see Set::__construct()
        @see Collection::__construct()
        @see Map::__construct()
    VERSION:
      comment: The current version of the extension.
    CPP_DRIVER_VERSION:
      comment: The version of the cpp-driver the extension is compiled against.
    LOG_DISABLED:
      comment: Used to disable logging.
    LOG_CRITICAL:
      comment: Allow critical level logging.
    LOG_ERROR:
      comment: Allow error level logging.
    LOG_WARN:
      comment: Allow warning level logging.
    LOG_INFO:
      comment: Allow info level logging.
    LOG_DEBUG:
      comment: Allow debug level logging.
    LOG_TRACE:
      comment: Allow trace level logging.
...
